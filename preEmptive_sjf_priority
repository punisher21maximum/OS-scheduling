#priority
#find Order by priority and At
#Question
'''
pNameA = [0, 1, 2, 3, 4]
btA = [11, 28, 2, 10, 16]  
atA = [0, 5, 12, 2, 9] 
priorityA = [2, 0, 3, 1, 4]
'''
pNameA = [0, 1, 2, 3, 4 ,5, 6]
lenn = len(pNameA)
btA = ('1 7 3 6 5 15 8').split()  ; btA = [int(i) for i in btA]
btA1 = btA[:]
atA = ('0 1 2 3 4 5 6').split() ; atA = [int(i) for i in atA]
#priority by----------
#---------------------priority non-P
priorityA = ('2 6 3 5 4 10 9').split() ; priorityA = [int(i) for i in priorityA]
#---------------------AT fcfs
#priorityA = atA # based on AT
#---------------------BT sjf
#priorityA = btA
#endQuestion
doneA = [] #done processes
orderA = [] #order of exec per sec
clk = min(atA)
summ = sum(btA)
while clk <= summ:
          if len(doneA) == lenn: break
          #take temp array every sec
          pNameA_temp = []
          priorityA_temp = []  
          btA_temp = []
          #for all process...
          for i in range(lenn):
                    #...which are not complete and Arrived
                    if i not in doneA and atA[i] <= clk:
                              #print 'process', clk, i
                              #initialise arrays for comparision
                              pNameA_temp.append( pNameA[i] )
                              priorityA_temp.append( priorityA[i] )
                              btA_temp.append( btA[i] )
          #print '-->',clk,pNameA_temp,priorityA_temp,btA_temp
          #get index of process Px to be executed
          #during this particular sec 
          min_pr_index = 0; #min priority process 
          min_pr = 100 #min priority value
          for i in range( len(priorityA_temp) ):
                    if priorityA_temp[i] < min_pr:
                              min_pr = priorityA_temp[i]
                              min_pr_index = i
                              
          process_2_exec = pNameA_temp[min_pr_index]
          orderA.append(process_2_exec)
          #exec this Px for 1 sec; reduce 1 sec from its BT
          btA[process_2_exec] = btA[process_2_exec] - 1
          if btA[process_2_exec] == 0:
                    doneA.append(process_2_exec)
           
          clk += 1
          
print 'order of execution by AT and priority\n', orderA
orderA1 = [ i+1 for i in orderA]
print 'order of execution by AT and priority\n', orderA1
btA = btA1[:]
print btA


#program3###################################
#fcfs
pName = pNameA
btArray = btA
atArray = atA
print btArray , atArray
#actual code
wt = 0
wtArray = []
tatArray = []
ctArray = []
for i in range(lenn):
          start = 0; end = 0; flag = 0;
          for j in range( len(orderA) ):
                    #print orderA[j],i
                    if orderA[j] == i and  flag == 0:
                              start = j; flag = 1
                    elif orderA[j] == i and  flag == 1:
                              end = j; flag = 1
          print i, start, end, end - atA[i] - btA[i] + 1
          wtArray.append(end - atA[i] - btA[i] + 1)
          ctArray.append(end +1)
for i in range(lenn):
          tatArray.append(wtArray[i] + btA[i])
print 'wtArray', wtArray                    
print 'tatArray', tatArray
print 'ctArray', ctArray 
#simple printing


print 'tatArray', tatArray
print 'P            BT        AT         WT             TAT             CT'
for i in range(lenn):
          print 'P',(pName[i]+1),'        ', btA[i],'        ', atA[i], \
          '         ', wtArray[i],'             ', tatArray[i], \
          '              ', ctArray[i]

'''
output
wtArray [0, 14, 0, 7, 1, 25, 16]
tatArray [1, 21, 3, 13, 6, 40, 24]
ctArray [1, 22, 5, 16, 10, 45, 30]
P            BT        AT         WT             TAT             CT
P 1          1          0           0               1                1
P 2          7          1           14               21                22
P 3          3          2           0               3                5
P 4          6          3           7               13                16
P 5          5          4           1               6                10
P 6          15          5           25               40                45
P 7          8          6           16               24                30
>>> 


'''
